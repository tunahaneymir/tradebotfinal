"""
PA + RL Trading Bot - Main Entry Point (FIXED VERSION)

Usage:
    python main.py
    python main.py --config production.yaml
    python main.py --mode test
"""

import sys
import time
import signal
import argparse
from pathlib import Path
from typing import Optional
import yaml

# Infrastructure
from infrastructure import InfrastructureManager

# Core PA System
from core.trend_detector import TrendDetector
from core.zone_detector import ZoneDetector
from core.choch_detector import ChochDetector
from core.entry_system import EntrySystem
from core.exit_system import ExitSystem

# Adaptive
from adaptive.reentry_manager import ReentryManager

# RL System
from rl.rl_agent_ppo import PPOAgent
from rl.state_builder import StateBuilder
from rl.setup_scorer import SetupScorer
from rl.gate_system import GateSystem
from rl.anti_fomo import AntiFOMO
from rl.anti_revenge import AntiRevenge
from rl.overtrading_detector import OvertradingDetector

# Learning
from learning.continuous_learning import ContinuousLearning
from learning.experience_buffer import ExperienceBuffer
from learning.system_integration import SystemIntegrator


class TradingBot:
    """
    PA + RL Trading Bot - Complete Implementation
    
    Architecture:
    - Infrastructure: State, backups, monitoring
    - Core PA: Trend, zones, entry/exit
    - Adaptive: Re-entry, liquidity, zone memory
    - RL: Agent, rewards, behavioral guards
    - Learning: Continuous learning, optimization
    """
    
    def __init__(self, config_path: str = "config.yaml", mode: str = "live"):
        """
        Initialize trading bot
        
        Args:
            config_path: Path to configuration file
            mode: 'live', 'paper', or 'test'
        """
        self.mode = mode
        self.running = False
        
        print("\n" + "="*60)
        print(f"🤖 PA + RL TRADING BOT - {mode.upper()} MODE")
        print("="*60)
        
        # Load configuration
        self.config = self._load_config(config_path)
        
        # Initialize infrastructure
        print("\n📦 Initializing infrastructure...")
        self.infra = InfrastructureManager(self.config)
        
        # Initialize PA components
        print("📦 Initializing PA components...")
        self.trend_detector = TrendDetector(self.config['trend'])
        self.zone_detector = ZoneDetector(self.config['zones'])
        self.choch_detector = ChochDetector(self.config['entry']['choch'])
        self.entry_system = EntrySystem(self.config['entry'])
        self.exit_system = ExitSystem(self.config['exit'])
        
        # Initialize adaptive
        print("📦 Initializing adaptive systems...")
        self.reentry_manager = ReentryManager(self.config['reentry'])
        
        # Initialize RL components
        print("📦 Initializing RL components...")
        self.state_builder = StateBuilder()
        self.setup_scorer = SetupScorer(self.config['rl'])
        self.gate_system = GateSystem(self.config['rl']['gates'])
        
        # Initialize behavioral guards
        print("📦 Initializing behavioral guards...")
        self.anti_fomo = AntiFOMO(self.config['behavior']['anti_fomo'])
        self.anti_revenge = AntiRevenge(self.config['behavior']['anti_revenge'])
        self.overtrading_detector = OvertradingDetector(
            self.config['behavior']['anti_overtrading']
        )
        
        # Initialize RL Agent
        print("📦 Initializing RL agent...")
        model_path = self.config.get('rl', {}).get('model_path')
        if model_path and Path(model_path).exists():
            self.agent = PPOAgent.load(model_path)
            print(f"   ✅ Loaded model from: {model_path}")
        else:
            print("   ⚠️  No trained model found, starting fresh")
            self.agent = None
        
        # Initialize learning system
        print("📦 Initializing learning system...")
        if self.config['learning']['enabled']:
            self.experience_buffer = ExperienceBuffer(
                max_size=self.config['learning']['buffer_size']
            )
            self.learning = ContinuousLearning(
                self.config['learning'],
                self.infra
            )
        else:
            self.experience_buffer = None
            self.learning = None
        
        # Initialize system integrator
        print("📦 Initializing system integrator...")
        self.integrator = SystemIntegrator(
            pa_components={
                'trend': self.trend_detector,
                'zone': self.zone_detector,
                'choch': self.choch_detector,
                'entry': self.entry_system,
                'exit': self.exit_system
            },
            rl_components={
                'agent': self.agent,
                'scorer': self.setup_scorer,
                'gates': self.gate_system
            },
            behavioral_guards={
                'fomo': self.anti_fomo,
                'revenge': self.anti_revenge,
                'overtrading': self.overtrading_detector
            },
            config=self.config
        )
        
        print("\n✅ Bot initialized successfully!")
        print("="*60 + "\n")
    
    def start(self):
        """Start the trading bot"""
        if self.running:
            print("⚠️  Bot already running")
            return
        
        try:
            # Start infrastructure
            self.infra.start_all()
            
            # Start learning system
            if self.learning:
                self.learning.start_training_loop()
            
            self.running = True
            
            # Run main loop
            self._main_loop()
            
        except KeyboardInterrupt:
            print("\n\n⚠️  Keyboard interrupt received")
            self.stop()
        except Exception as e:
            print(f"\n\n❌ Fatal error: {e}")
            self.stop()
            raise
    
    def stop(self):
        """Stop the trading bot"""
        if not self.running:
            return
        
        print("\n" + "="*60)
        print("🛑 STOPPING BOT")
        print("="*60)
        
        try:
            # Stop learning
            if self.learning:
                self.learning.stop()
            
            # Stop infrastructure
            self.infra.stop_all()
            
            self.running = False
            
            print("\n✅ Bot stopped successfully!")
            print("="*60 + "\n")
            
        except Exception as e:
            print(f"\n❌ Error during shutdown: {e}")
    
    def _main_loop(self):
        """Main trading loop"""
        print("\n" + "="*60)
        print("🔄 STARTING MAIN LOOP")
        print("="*60 + "\n")
        
        iteration = 0
        
        while self.running:
            try:
                iteration += 1
                
                # Get market data
                # TODO: Implement data fetching
                # data = self.fetch_market_data()
                
                # Process signals through integrator
                # signal = self.integrator.process_market_data(data)
                
                # Execute trades
                # if signal['action'] != 'HOLD':
                #     self.execute_trade(signal)
                
                print(f"[Iteration {iteration}] System running...")
                
                # Update dashboard
                self.infra.update_dashboard()
                
                # Sleep (in production, sync with candle close)
                time.sleep(60)
                
            except KeyboardInterrupt:
                raise
            except Exception as e:
                print(f"❌ Error in main loop: {e}")
                self.infra.send_notification("critical", f"Main loop error: {e}")
                time.sleep(5)
    
    def _load_config(self, config_path: str) -> dict:
        """Load configuration from file"""
        config_file = Path(config_path)
        
        if not config_file.exists():
            print(f"⚠️  Config file not found: {config_path}")
            print("📝 Using default configuration")
            return self._default_config()
        
        try:
            with open(config_file) as f:
                config = yaml.safe_load(f)
            print(f"✅ Configuration loaded: {config_path}")
            return config
        except Exception as e:
            print(f"❌ Error loading config: {e}")
            print("📝 Using default configuration")
            return self._default_config()
    
    def _default_config(self) -> dict:
        """Default configuration"""
        return {
            "bot": {
                "name": "PA+RL Trading Bot",
                "version": "1.0.0"
            },
            "paths": {
                "data_dir": "state",
                "database_path": "data/trades.db",
                "logs_dir": "logs",
                "models_dir": "models"
            },
            "telegram": {
                "enabled": False
            },
            "risk": {
                "per_trade_pct": 0.02,
                "daily_limit_pct": 0.06,
                "portfolio_limit_pct": 0.08
            },
            "trading": {
                "timeframes": {
                    "trend": "4H",
                    "zone": "1H",
                    "entry": "15M"
                },
                "max_positions": 3
            },
            "trend": {
                "ema_fast": 20,
                "ema_slow": 50
            },
            "zones": {
                "min_touches": 2,
                "min_quality": 4
            },
            "entry": {
                "choch": {"min_strength": 0.4}
            },
            "exit": {
                "take_profit": {
                    "tp1": {"ratio": 0.5, "rr": 1.5},
                    "tp2": {"ratio": 0.3, "rr_min": 2.5},
                    "tp3": {"ratio": 0.2, "dynamic": True}
                }
            },
            "reentry": {
                "enabled": True,
                "max_attempts": 2
            },
            "rl": {
                "gates": {
                    "enabled": True,
                    "min_zone_quality": 4
                }
            },
            "behavior": {
                "anti_fomo": {"enabled": True, "threshold": 50},
                "anti_revenge": {"enabled": True},
                "anti_overtrading": {"enabled": True}
            },
            "learning": {
                "enabled": True,
                "buffer_size": 100000
            }
        }


def setup_signal_handlers(bot: TradingBot):
    """Setup signal handlers for graceful shutdown"""
    def signal_handler(signum, frame):
        print(f"\n\n⚠️  Signal {signum} received")
        bot.stop()
        sys.exit(0)
    
    signal.signal(signal.SIGINT, signal_handler)
    signal.signal(signal.SIGTERM, signal_handler)


def main():
    """Main entry point"""
    parser = argparse.ArgumentParser(description="PA + RL Trading Bot")
    parser.add_argument("--config", default="config.yaml", help="Config file path")
    parser.add_argument("--mode", default="paper", 
                       choices=["live", "paper", "test"], 
                       help="Trading mode")
    args = parser.parse_args()
    
    # Create bot
    bot = TradingBot(config_path=args.config, mode=args.mode)
    
    # Setup signal handlers
    setup_signal_handlers(bot)
    
    # Start bot
    bot.start()


if __name__ == "__main__":
    main()
