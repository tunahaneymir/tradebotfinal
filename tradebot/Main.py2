"""
PA + RL Trading Bot - Main Entry Point (FUTURES PAPER TRADING)

Usage:
    python Main.py --mode paper
    python Main.py --mode live  # After 6 months training
"""

import sys
import time
import signal
import argparse
from pathlib import Path
from typing import Optional
import yaml

# Infrastructure
from infrastructure import InfrastructureManager

# Core PA System
from core.trend_detector import TrendDetector
from core.zone_detector import ZoneDetector
from core.choch_detector import ChochDetector
from core.entry_system import EntrySystem
from core.exit_system import ExitSystem

# Adaptive
from adaptive.reentry_manager import ReentryManager

# RL System
from rl.rl_agent_ppo import PPOAgent
from rl.state_builder import StateBuilder
from rl.setup_scorer import SetupScorer
from rl.gate_system import GateSystem
from rl.anti_fomo import AntiFOMO
from rl.anti_revenge import AntiRevenge
from rl.overtrading_detector import OvertradingDetector

# Learning
from learning.continuous_learning import ContinuousLearning
from learning.experience_buffer import ExperienceBuffer
from learning.system_integration import SystemIntegrator

# Position Agent (ZATEN VAR!)
from position_agent.coin_selector import CoinSelector
from position_agent.executor_binance_futures import BinanceFuturesExecutor  # YENƒ∞!
from position_agent.position_agent import PositionAgent
from position_agent.rmm_engine import RMMEngine

# Data
from data.data_fetcher import DataFetcher


class TradingBot:
    """
    PA + RL Trading Bot - FUTURES Paper Trading
    
    6 Ay Plan:
    - Paper trading ile √∂ƒürenme
    - RL agent eƒüitimi
    - Performans tracking
    - 6 ay sonra Live Trading'e ge√ßi≈ü
    """
    
    def __init__(self, config_path: str = "config.yaml", mode: str = "paper"):
        """
        Initialize trading bot
        
        Args:
            config_path: Path to configuration file
            mode: 'paper' or 'live'
        """
        self.mode = mode
        self.running = False
        
        print("\n" + "="*60)
        print(f"ü§ñ PA + RL TRADING BOT - {mode.upper()} MODE")
        print(f"üíπ Market: BINANCE FUTURES (https://demo.binance.com)")
        print("="*60)
        
        # Load configuration
        self.config = self._load_config(config_path)
        
        # Verify mode
        if mode == "live" and not self._verify_live_ready():
            print("\n‚ö†Ô∏è  UYARI: Live trading i√ßin 6 aylƒ±k paper trading gerekli!")
            print("    √ñnce --mode paper ile ba≈ülayƒ±n.\n")
            sys.exit(1)
        
        # Initialize infrastructure
        print("\nüì¶ Initializing infrastructure...")
        self.infra = InfrastructureManager(self.config)
        
        # Initialize data fetcher
        print("üì¶ Initializing data fetcher...")
        self.data_fetcher = DataFetcher(
            source=self.config['exchange']['data_source']
        )
        
        # Initialize PA components
        print("üì¶ Initializing PA components...")
        self.trend_detector = TrendDetector(self.config['trend'])
        self.zone_detector = ZoneDetector(self.config['zones'])
        self.choch_detector = ChochDetector(self.config['entry']['choch'])
        self.entry_system = EntrySystem(self.config['entry'])
        self.exit_system = ExitSystem(self.config['exit'])
        
        # Initialize adaptive
        print("üì¶ Initializing adaptive systems...")
        self.reentry_manager = ReentryManager(self.config['reentry'])
        
        # Initialize RL components
        print("üì¶ Initializing RL components...")
        self.state_builder = StateBuilder()
        self.setup_scorer = SetupScorer(self.config['rl'])
        self.gate_system = GateSystem(self.config['rl']['gates'])
        
        # Initialize behavioral guards
        print("üì¶ Initializing behavioral guards...")
        self.anti_fomo = AntiFOMO(self.config['behavior']['anti_fomo'])
        self.anti_revenge = AntiRevenge(self.config['behavior']['anti_revenge'])
        self.overtrading_detector = OvertradingDetector(
            self.config['behavior']['anti_overtrading']
        )
        
        # Initialize RL Agent
        print("üì¶ Initializing RL agent...")
        model_path = self.config.get('rl', {}).get('model_path')
        if model_path and Path(model_path).exists():
            self.agent = PPOAgent.load(model_path)
            print(f"   ‚úÖ Loaded model from: {model_path}")
        else:
            print("   ‚ö†Ô∏è  No trained model found, starting fresh")
            self.agent = None
        
        # Initialize Position Management
        print("üì¶ Initializing position management...")
        self.coin_selector = CoinSelector(self.config['trading']['coin_selection'])
        self.rmm_engine = RMMEngine(self.config['risk'])
        
        # Initialize Executor (Paper or Live)
        print(f"üì¶ Initializing executor ({mode} mode)...")
        if mode == "paper":
            self.executor = BinanceFuturesExecutor(self.config['exchange'])
            print("   ‚úÖ Binance Futures Testnet executor ready!")
        else:
            # Live trading - aynƒ± executor ama testnet=false
            live_config = self.config['exchange'].copy()
            live_config['testnet'] = False
            self.executor = BinanceFuturesExecutor(live_config)
            print("   ‚ö†Ô∏è  LIVE TRADING ACTIVE - REAL MONEY!")
        
        self.position_agent = PositionAgent(
            executor=self.executor,
            rmm_engine=self.rmm_engine,
            config=self.config
        )
        
        # Initialize learning system
        print("üì¶ Initializing learning system...")
        if self.config['learning']['enabled']:
            self.experience_buffer = ExperienceBuffer(
                max_size=self.config['learning']['buffer_size']
            )
            self.learning = ContinuousLearning(
                self.config['learning'],
                self.infra
            )
            print("   ‚úÖ 6-month learning program activated!")
        else:
            self.experience_buffer = None
            self.learning = None
        
        # Initialize system integrator
        print("üì¶ Initializing system integrator...")
        self.integrator = SystemIntegrator(
            pa_components={
                'trend': self.trend_detector,
                'zone': self.zone_detector,
                'choch': self.choch_detector,
                'entry': self.entry_system,
                'exit': self.exit_system
            },
            rl_components={
                'agent': self.agent,
                'scorer': self.setup_scorer,
                'gates': self.gate_system
            },
            behavioral_guards={
                'fomo': self.anti_fomo,
                'revenge': self.anti_revenge,
                'overtrading': self.overtrading_detector
            },
            config=self.config
        )
        
        print("\n‚úÖ Bot initialized successfully!")
        print("="*60 + "\n")
    
    def start(self):
        """Start the trading bot"""
        if self.running:
            print("‚ö†Ô∏è  Bot already running")
            return
        
        try:
            # Start infrastructure
            self.infra.start_all()
            
            # Start learning system
            if self.learning:
                self.learning.start_training_loop()
            
            self.running = True
            
            print(f"\nüöÄ Starting {self.mode.upper()} trading loop...")
            if self.mode == "paper":
                print("üìö 6-month learning program active")
                print("üí° Bot will learn from paper trades before going live\n")
            
            # Run main loop
            self._main_loop()
            
        except KeyboardInterrupt:
            print("\n\n‚ö†Ô∏è  Keyboard interrupt received")
            self.stop()
        except Exception as e:
            print(f"\n\n‚ùå Fatal error: {e}")
            import traceback
            traceback.print_exc()
            self.stop()
            raise
    
    def stop(self):
        """Stop the trading bot"""
        if not self.running:
            return
        
        print("\n" + "="*60)
        print("üõë STOPPING BOT")
        print("="*60)
        
        try:
            # Stop learning
            if self.learning:
                self.learning.stop()
            
            # Close positions (in live mode)
            if self.mode == "live":
                print("   Closing open positions...")
                # TODO: Close positions
            
            # Stop infrastructure
            self.infra.stop_all()
            
            self.running = False
            
            print("\n‚úÖ Bot stopped successfully!")
            print("="*60 + "\n")
            
        except Exception as e:
            print(f"\n‚ùå Error during shutdown: {e}")
    
    def _main_loop(self):
        """Main trading loop"""
        iteration = 0
        
        while self.running:
            try:
                iteration += 1
                
                # Select coins to trade
                coins = self.coin_selector.select_coins()
                
                if not coins:
                    print(f"[Iteration {iteration}] No coins selected, waiting...")
                    time.sleep(60)
                    continue
                
                # Process each coin
                for symbol in coins:
                    try:
                        # Fetch market data
                        data = self.data_fetcher.fetch_ohlcv(
                            symbol=symbol,
                            timeframe=self.config['trading']['timeframes']['entry'],
                            limit=500
                        )
                        
                        # Process through integrator
                        signal = self.integrator.process_market_data(data)
                        
                        # Execute if valid signal
                        if signal['action'] != 'HOLD':
                            result = self.position_agent.execute_signal(signal, symbol)
                            
                            if result['success']:
                                print(f"‚úÖ {signal['action']} {symbol}: {result['message']}")
                                
                                # Store experience for learning
                                if self.experience_buffer:
                                    self.experience_buffer.add(
                                        state=signal['state'],
                                        action=signal['action'],
                                        reward=0,  # Will be updated later
                                        next_state=None,
                                        done=False
                                    )
                            else:
                                print(f"‚ùå Failed {signal['action']} {symbol}: {result['message']}")
                        
                    except Exception as e:
                        print(f"‚ùå Error processing {symbol}: {e}")
                        continue
                
                # Update dashboard
                self.infra.update_dashboard()
                
                # Sleep until next cycle
                print(f"[Iteration {iteration}] Cycle complete, waiting...")
                time.sleep(60)
                
            except KeyboardInterrupt:
                raise
            except Exception as e:
                print(f"‚ùå Error in main loop: {e}")
                self.infra.send_notification("critical", f"Main loop error: {e}")
                time.sleep(5)
    
    def _verify_live_ready(self) -> bool:
        """Verify bot is ready for live trading (after 6 months paper)"""
        # TODO: Check performance metrics, training duration, etc.
        # For now, just check if model exists
        model_path = self.config.get('rl', {}).get('model_path')
        return model_path and Path(model_path).exists()
    
    def _load_config(self, config_path: str) -> dict:
        """Load configuration from file"""
        config_file = Path(config_path)
        
        if not config_file.exists():
            print(f"‚ö†Ô∏è  Config file not found: {config_path}")
            print("üìù Using default configuration")
            return self._default_config()
        
        try:
            with open(config_file) as f:
                config = yaml.safe_load(f)
            print(f"‚úÖ Configuration loaded: {config_path}")
            return config
        except Exception as e:
            print(f"‚ùå Error loading config: {e}")
            print("üìù Using default configuration")
            return self._default_config()
    
    def _default_config(self) -> dict:
        """Default configuration"""
        return {
            "bot": {
                "name": "PA+RL Trading Bot",
                "version": "1.0.0"
            },
            "paths": {
                "data_dir": "state",
                "database_path": "data/trades.db",
                "logs_dir": "logs",
                "models_dir": "models"
            },
            "exchange": {
                "name": "binance",
                "market_type": "futures",  # FUTURES!
                "data_source": "simulation"
            },
            "telegram": {
                "enabled": False
            },
            "risk": {
                "per_trade_pct": 0.02,
                "daily_limit_pct": 0.06,
                "portfolio_limit_pct": 0.08
            },
            "trading": {
                "timeframes": {
                    "trend": "4H",
                    "zone": "1H",
                    "entry": "15M"
                },
                "max_positions": 3,
                "coin_selection": {
                    "enabled": True,
                    "max_coins": 10
                }
            },
            "trend": {
                "ema_fast": 20,
                "ema_slow": 50
            },
            "zones": {
                "min_touches": 2,
                "min_quality": 4
            },
            "entry": {
                "choch": {"min_strength": 0.4}
            },
            "exit": {
                "take_profit": {
                    "tp1": {"ratio": 0.5, "rr": 1.5},
                    "tp2": {"ratio": 0.3, "rr_min": 2.5},
                    "tp3": {"ratio": 0.2, "dynamic": True}
                }
            },
            "reentry": {
                "enabled": True,
                "max_attempts": 2
            },
            "rl": {
                "gates": {
                    "enabled": True,
                    "min_zone_quality": 4
                }
            },
            "behavior": {
                "anti_fomo": {"enabled": True, "threshold": 50},
                "anti_revenge": {"enabled": True},
                "anti_overtrading": {"enabled": True}
            },
            "learning": {
                "enabled": True,
                "buffer_size": 100000
            }
        }


def setup_signal_handlers(bot: TradingBot):
    """Setup signal handlers for graceful shutdown"""
    def signal_handler(signum, frame):
        print(f"\n\n‚ö†Ô∏è  Signal {signum} received")
        bot.stop()
        sys.exit(0)
    
    signal.signal(signal.SIGINT, signal_handler)
    signal.signal(signal.SIGTERM, signal_handler)


def main():
    """Main entry point"""
    parser = argparse.ArgumentParser(description="PA + RL Trading Bot")
    parser.add_argument("--config", default="config.yaml", help="Config file path")
    parser.add_argument("--mode", default="paper", 
                       choices=["paper", "live"], 
                       help="Trading mode (paper for first 6 months)")
    args = parser.parse_args()
    
    # Warning for live mode
    if args.mode == "live":
        print("\n" + "="*60)
        print("‚ö†Ô∏è  LIVE TRADING MODE SELECTED")
        print("="*60)
        response = input("Are you sure? This will use REAL money! (yes/no): ")
        if response.lower() != "yes":
            print("Cancelled.")
            sys.exit(0)
    
    # Create bot
    bot = TradingBot(config_path=args.config, mode=args.mode)
    
    # Setup signal handlers
    setup_signal_handlers(bot)
    
    # Start bot
    bot.start()


if __name__ == "__main__":
    main()
